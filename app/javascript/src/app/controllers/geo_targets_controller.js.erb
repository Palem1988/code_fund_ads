import { Controller } from 'stimulus';

export default class extends Controller {
  static targets = ['tree','countryCodes', 'provinceCodes'];

  connect() {
    let {selectedCountryCodes, selectedProvinceCodes} = this.element.dataset;
    this.selectedCountryCodes = (selectedCountryCodes || '').split(',');
    this.selectedProvinceCodes = (selectedProvinceCodes || '').split(',');
    this.tree = <%= Province.hierarchical_region_data.to_json.html_safe %>;
  }

  toggle(event) {
    let checked = event.target.checked;
    let name = event.target.name;
    let {leaf, region, subregion, country, isoCode} = event.target.dataset;

    this.toggleContainerElement(event);
    this.updateChildren(event);
    this.updateAncestors(event);

    if (leaf === 'region' && checked) this.selectRegion(name);
    if (leaf === 'region' && !checked) this.deselectRegion(name);
    if (leaf === 'subregion' && checked) this.selectSubregion(name, region);
    if (leaf === 'subregion' && !checked) this.deselectSubregion(name, region);
    if (leaf === 'country' && checked) this.selectCountry(name, isoCode, region, subregion);
    if (leaf === 'country' && !checked) this.deselectCountry(name, isoCode, region, subregion);
    if (leaf === 'province' && checked) this.selectProvince(name, isoCode, region, subregion, country);
    if (leaf === 'province' && !checked) this.deselectProvince(name, isoCode, region, subregion, country);

    this.countryCodesTarget.value = this.selectedCountryCodes;
    this.provinceCodesTarget.value = this.selectedProvinceCodes;
  }

  toggleContainerElement(event) {
    const parent = this.getContainer(event.target);

    if (event.target.type === 'checkbox') {
      if (event.target.checked && !parent.classList.contains('open')) {
        parent.classList.add('open');
      }
    } else {
      parent.classList.toggle('open');
    }
  }

  updateChildren(event) {
    const element = event.target

    if (element.dataset.leaf === 'province') {
      return;
    }

    const childInputs = this.getContainer(element)
      .querySelectorAll(`[data-${element.dataset.leaf}="${element.name}"]`);

    if (childInputs) {
      const childArray = Array.from(childInputs);
      childInputs.forEach(i => {
        i.checked = event.target.checked;
        i.indeterminate = false;
      });
    }
  }

  updateAncestors(event) {
    let parentContainers = [];
    let ancestor = this.getContainer(event.target);

    while (ancestor) {
      parentContainers.push(ancestor);
      ancestor = this.getContainer(ancestor.parentElement);
    }

    parentContainers.forEach((pc) => {
      let parentInput = pc.querySelector('.geo-targets__checkbox > input');
      let childInputs = Array.from(
        pc.querySelectorAll(':scope > .form-check > .geo-targets__checkbox > input')
      );

      if (childInputs.every(i => { return i.checked })) {
        parentInput.checked = true;
        parentInput.indeterminate = false;
      } else if (childInputs.some(i => { return i.checked || i.indeterminate })) {
        parentInput.checked = false;
        parentInput.indeterminate = true;
      } else {
        parentInput.checked = false;
        parentInput.indeterminate = false;
      }
    });
  }

  getContainer(element) {
    return element.closest('.geo-targets__toggle-container');
  }

  selectRegion(name) {
    const region = this.tree[name];
    region.checked = true;

    const subregions = Object.keys(region.subregions);
    subregions.forEach(subregion => {
      this.selectSubregion(subregion, name);
    });
  }

  deselectRegion(name) {
    const region = this.tree[name];
    region.checked = false;

    const subregions = Object.keys(region.subregions);
    subregions.forEach(subregion => {
      this.deselectSubregion(subregion, name);
    });
  }

  selectSubregion(name, region) {
    const subregion = this.tree[region].subregions[name];
    subregion.checked = true;

    const countries = Object.keys(subregion.countries);
    countries.forEach(country => {
      this.selectCountry(country, subregion.countries[country].iso_code, region, name);
    });
  }

  deselectSubregion(name, region) {
    const subregion = this.tree[region].subregions[name];
    subregion.checked = false;

    const countries = Object.keys(subregion.countries);
    countries.forEach(country => {
      this.deselectCountry(country, subregion.countries[country].iso_code, region, name);
    });
  }

  selectCountry(name, isoCode, region, subregion) {
    if (this.selectedCountryCodes.indexOf(isoCode) === -1) {
      const country = this.tree[region].subregions[subregion].countries[name];
      country.checked = true;
      this.selectedCountryCodes.push(isoCode);
      this.deselectTreeProvinces(country.provinces);
    }
  }

  deselectCountry(name, isoCode, region, subregion, ) {
    let index = this.selectedCountryCodes.indexOf(isoCode);
    if (index > -1) {
      const country = this.tree[region].subregions[subregion].countries[name];
      country.checked = false;
      this.selectedCountryCodes.splice(index, 1);
      this.deselectTreeProvinces(country.provinces);
    }
  }

  selectProvince(name, isoCode, region, subregion, country) {
    if (this.selectedProvinceCodes.indexOf(isoCode) === -1) this.selectedProvinceCodes.push(isoCode);
    const parentCountry = this.tree[region].subregions[subregion].countries[country]
    parentCountry.provinces[name].checked = true;

    const allSelected = Object.keys(parentCountry.provinces).every(province => {
      return parentCountry.provinces[province].checked;
    });
    if (allSelected) this.selectCountry(country, parentCountry.iso_code, region, subregion);
  }

  deselectProvince(name, isoCode, region, subregion, country) {
    const province = this.tree[region].subregions[subregion].countries[country].provinces[name];
    const index = this.selectedProvinceCodes.indexOf(isoCode);

    if (index > -1) {
      this.selectedProvinceCodes.splice(index, 1);
      province.checked = false;
    } else {
      const parentCountry = this.tree[region].subregions[subregion].countries[country];
      if (parentCountry.checked) {
        this.deselectCountry(country, parentCountry.iso_code, region, subregion);
        this.selectTreeProvinces(parentCountry.provinces);
        this.selectedProvinceCodes.splice(index, 1);
        province.checked = false;
      }
    }
  }

  selectTreeProvinces(provinces) {
    Object.keys(provinces).forEach(province => {
      const index = this.selectedProvinceCodes.indexOf(provinces[province].iso_code);
      if (index === -1) this.selectedProvinceCodes.push(provinces[province].iso_code);
      provinces[province].checked = true;
    });
  }

  deselectTreeProvinces(provinces) {
    Object.keys(provinces).forEach(province => {
      const index = this.selectedProvinceCodes.indexOf(provinces[province].iso_code);
      if (index > -1) this.selectedProvinceCodes.splice(index, 1);
      provinces[province].checked = false;
    });
  }
}
